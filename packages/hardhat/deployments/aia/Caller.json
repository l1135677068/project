{
  "address": "0x49365909a1F6518f9058B6AfCc6b4fB75637f8f4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "increment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "value",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7b37f71825e8d8850c9c85d8c9b4e5ca7df7b6933fc6f6757c85dd84adb7ed35",
  "receipt": {
    "to": null,
    "from": "0x6080D00fc35A843eBeA436B4E2244fEE552595a6",
    "contractAddress": "0x49365909a1F6518f9058B6AfCc6b4fB75637f8f4",
    "transactionIndex": 0,
    "gasUsed": "172956",
    "logsBloom": "0x
    "blockHash": "0x57b987e860274fd24a2733094c9c2fb99dddd076774a784eb4f693fc1fe218d7",
    "transactionHash": "0x7b37f71825e8d8850c9c85d8c9b4e5ca7df7b6933fc6f6757c85dd84adb7ed35",
    "logs": [],
    "blockNumber": 36729645,
    "cumulativeGasUsed": "172956",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x86c66D19b87351c1AD7125889Bcb382f5baFABc7"
  ],
  "numDeployments": 3,
  "solcInputHash": "f439c683e1df7f5ad71bcd5fbfada60d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Caller.sol\":\"Caller\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n\\t/**\\n\\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n\\t * another (`to`).\\n\\t *\\n\\t * Note that `value` may be zero.\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n\\t * a call to {approve}. `value` is the new allowance.\\n\\t */\\n\\tevent Approval(\\n\\t\\taddress indexed owner,\\n\\t\\taddress indexed spender,\\n\\t\\tuint256 value\\n\\t);\\n\\n\\t/**\\n\\t * @dev Returns the value of tokens in existence.\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the value of tokens owned by `account`.\\n\\t */\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Returns the remaining number of tokens that `spender` will be\\n\\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n\\t * zero by default.\\n\\t *\\n\\t * This value changes when {approve} or {transferFrom} are called.\\n\\t */\\n\\tfunction allowance(\\n\\t\\taddress owner,\\n\\t\\taddress spender\\n\\t) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n\\t * caller's tokens.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n\\t * that someone may use both the old and the new allowance by unfortunate\\n\\t * transaction ordering. One possible solution to mitigate this race\\n\\t * condition is to first reduce the spender's allowance to 0 and set the\\n\\t * desired value afterwards:\\n\\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t */\\n\\tfunction approve(address spender, uint256 value) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n\\t * allowance mechanism. `value` is then deducted from the caller's\\n\\t * allowance.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf47105c9918dc8c05e4cef927a186292f742eac08d1efa484dc5f0de203cb151\",\"license\":\"MIT\"},\"contracts/Caller.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Caller {\\n\\taddress public proxy;\\n\\tuint256 public value;\\n\\n\\tconstructor(address _proxy) {\\n\\t\\tproxy = _proxy;\\n\\t}\\n\\n\\tfunction increment() external {\\n\\t\\t(, bytes memory data) = proxy.call(\\n\\t\\t\\tabi.encodeWithSignature(\\\"increment()\\\")\\n\\t\\t);\\n\\t\\tvalue = abi.decode(data, (uint));\\n\\t}\\n}\\n\",\"keccak256\":\"0x1664a06b423d9f4a3b140772d2d340a755eee59ccc2c014f2933b10ec86c3105\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161024c38038061024c83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101b9806100936000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633fa4f24514610046578063d09de08a14610062578063ec5568891461006c575b600080fd5b61004f60015481565b6040519081526020015b60405180910390f35b61006a610097565b005b60005461007f906001600160a01b031681565b6040516001600160a01b039091168152602001610059565b6000805460408051600481526024810182526020810180516001600160e01b031663684ef04560e11b17905290516001600160a01b03909216916100db919061013b565b6000604051808303816000865af19150503d8060008114610118576040519150601f19603f3d011682016040523d82523d6000602084013e61011d565b606091505b5091505080806020019051810190610135919061016a565b60015550565b6000825160005b8181101561015c5760208186018101518583015201610142565b506000920191825250919050565b60006020828403121561017c57600080fd5b505191905056fea264697066735822122013409c9614ac64373810c7e487eb4ae297b3dfb66a454451e1fd4ccf27569a4b64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80633fa4f24514610046578063d09de08a14610062578063ec5568891461006c575b600080fd5b61004f60015481565b6040519081526020015b60405180910390f35b61006a610097565b005b60005461007f906001600160a01b031681565b6040516001600160a01b039091168152602001610059565b6000805460408051600481526024810182526020810180516001600160e01b031663684ef04560e11b17905290516001600160a01b03909216916100db919061013b565b6000604051808303816000865af19150503d8060008114610118576040519150601f19603f3d011682016040523d82523d6000602084013e61011d565b606091505b5091505080806020019051810190610135919061016a565b60015550565b6000825160005b8181101561015c5760208186018101518583015201610142565b506000920191825250919050565b60006020828403121561017c57600080fd5b505191905056fea264697066735822122013409c9614ac64373810c7e487eb4ae297b3dfb66a454451e1fd4ccf27569a4b64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 82,
        "contract": "contracts/Caller.sol:Caller",
        "label": "proxy",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 84,
        "contract": "contracts/Caller.sol:Caller",
        "label": "value",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}